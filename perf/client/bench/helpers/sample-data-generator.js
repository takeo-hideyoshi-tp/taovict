import { isFunction, mapValues, random, times } from "lodash";

/**
 * @param {number} [from=1] min value, inclusive
 * @param {number} [to=999] max value, inclusive
 * @return {number} random integer in the provided range
 */
export const integer = (from = 1, to = 999) => random(from, to);

/**
 * @param {number} [from=1] min value, inclusive
 * @param {number} [to=999] max value, inclusive
 * @return {number} random number in the provided range
 */
export const number = (from = 1, to = 999) => random(from, to, true);

/**
 * @return {boolean} random boolean
 */
export const boolean = () => Boolean(integer(0, 1));

/**
 * @param {Date} [from=Unix epoch] start date, inclusive
 * @param {Date} [to=now] end date, inclusive
 * @return {Date} random Date in the provided range
 */
export const date = (from = new Date(0), to = new Date()) => {
  const fromDateMilliseconds = from.getTime();
  const toDateMilliseconds = to.getTime();

  return new Date(
    integer(fromDateMilliseconds, toDateMilliseconds)
  );
};

/**
 * @param {string} [start=a] character at the start of the range, inclusive
 * @param {string} [end=z] character at the end of the range, inclusive
 * @return {string} random character in the provided range
 */
export const character = (start = "a", end = "z") => {
  const unicodeStartCodePoint = start.charCodeAt(0);
  const unicodeEndCodePoint = end.charCodeAt(0);

  return String.fromCharCode(
    integer(unicodeStartCodePoint, unicodeEndCodePoint)
  );
};

/**
 * @param {number} [minLen=0] minimum length of the string, inclusive
 * @param {number} [maxLen=7] maximum length of the string, inclusive
 * @return {string} random string of random length in the provided range
 */
export const string = (minLen = 1, maxLen = 7) => {
  const length = integer(minLen, maxLen);
  const charArr = times(length, () => character());

  return charArr.join("");
};

/**
 * @param {Object} format the desired shape of the Object
 * @return {Object} an object matching the `format`
 */
export const shape = (format) => {
  return mapValues(format, (val) => {
    return isFunction(val) ? val() : val;
  });
};

/**
 * @param {number} qty desired number of elements in the array
 * @param {any} generator if function, returns the element to put in the array, else is the
 * the element to put in the array
 * @return {Array} an array of length `qty` filled with elements generated by `generator`
 */
export const array = (qty, generator) => times(qty, () => {
  return isFunction(generator) ? generator() : generator;
});

/**
 * @param {number[]} qtys array of quantities to produce for samples
 * @param {any} generator if function, returns the element to put in the array, else is the
 * the element to put in the array
 * @return {Object} Object with quantities as keys and values of arrays of generated samples
 */
export const samples = (qtys, generator) => {
  return qtys.reduce((acc, qty) => {
    if (qty > 0) {
      acc[qty] = array(qty, generator);
    }
    return acc;
  }, {});
};

export default {
  integer,
  number,
  boolean,
  date,
  character,
  string,
  array,
  shape,
  samples
};
